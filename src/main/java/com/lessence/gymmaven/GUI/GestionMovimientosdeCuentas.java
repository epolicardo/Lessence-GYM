/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lessence.gymmaven.GUI;

import com.lessence.gymmaven.clases.Actividades_Socios_Turnos;
import com.lessence.gymmaven.clases.Caja_diaria;
import com.lessence.gymmaven.clases.Cuotas_registros;
import com.lessence.gymmaven.clases.Estados;
import com.lessence.gymmaven.clases.FormasPago;
import com.lessence.gymmaven.clases.HibernateUtil;
import com.lessence.gymmaven.clases.ParametrosSistema;
import com.lessence.gymmaven.clases.Personas;
import com.lessence.gymmaven.clases.Socios;
import com.lessence.gymmaven.clases.seteosGUI;
import java.sql.SQLException;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.ComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Criteria;
import org.hibernate.Session;

/**
 *
 * @author Emiliano
 */
public class GestionMovimientosdeCuentas extends javax.swing.JDialog {

    /**
     * Creates new form GestionMovimientos
     *
     */
    public GestionMovimientosdeCuentas(String DNI) {
        initComponents();
        
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Criteria CriteriaFormaPago = sesion.createCriteria(FormasPago.class);
        List<FormasPago> listaFormaPago = CriteriaFormaPago.list();
        for (int i = 0; i < listaFormaPago.size(); i++) {
            jCFormaPago.addItem(listaFormaPago.get(i).getFormaPago());
        }
        ListarPagos(DNI);
        jPDatosTarjeta.setVisible(false);
        this.setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFTImporte1 = new javax.swing.JFormattedTextField();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jBBuscar = new javax.swing.JButton();
        jLEstado = new javax.swing.JLabel();
        jTNombre = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTHistorial = new javax.swing.JTable();
        jTSocio = new javax.swing.JTextField();
        jPPago = new javax.swing.JPanel();
        jBGuardar = new javax.swing.JButton();
        jBCancelar = new javax.swing.JButton();
        jBAñadir = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jcbPasesActividad1 = new javax.swing.JCheckBox();
        jcbPasesActividad2 = new javax.swing.JCheckBox();
        jPPasesActividad1 = new javax.swing.JPanel();
        jCActividades1 = new javax.swing.JComboBox<>();
        jRBPaseLibre = new javax.swing.JRadioButton();
        jRB4Pases = new javax.swing.JRadioButton();
        jRB8Pases = new javax.swing.JRadioButton();
        jRB12Pases = new javax.swing.JRadioButton();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        jRBPases = new javax.swing.JRadioButton();
        jPPasesActividad2 = new javax.swing.JPanel();
        jCActividades2 = new javax.swing.JComboBox<>();
        jrbPaseLibre2 = new javax.swing.JRadioButton();
        jrb4Pases2 = new javax.swing.JRadioButton();
        jrb8Pases2 = new javax.swing.JRadioButton();
        jrb12Pases2 = new javax.swing.JRadioButton();
        jsPases = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        jrbPases = new javax.swing.JRadioButton();
        jcbEliminaPasesPrevios = new javax.swing.JCheckBox();
        jPPagos = new javax.swing.JPanel();
        jPDatosPago = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jTConcepto = new javax.swing.JTextField();
        jCFormaPago = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jDCFecha = new com.toedter.calendar.JDateChooser();
        jFTImporte = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        jPDatosTarjeta = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jCEmisor = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jFTNroTarjeta = new javax.swing.JFormattedTextField();
        jFTVencimiento = new javax.swing.JFormattedTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jFTNroTarjeta1 = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jlCicloPago = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jlVencimientoActual = new javax.swing.JLabel();

        jFTImporte1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(""))));
        jFTImporte1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFTImporte1KeyPressed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jLabel1.setText("Documento");

        jLabel4.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jLabel4.setText("Estado");

        jBBuscar.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jBBuscar.setText("Buscar");
        jBBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarActionPerformed(evt);
            }
        });

        jLEstado.setFont(new java.awt.Font("BankGothic Lt BT", 1, 18)); // NOI18N

        jTNombre.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N

        jTHistorial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Concepto", "Forma de pago", "Importe"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTHistorial);

        jTSocio.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jTSocio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTSocioFocusGained(evt);
            }
        });
        jTSocio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTSocioKeyPressed(evt);
            }
        });

        jPPago.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPPago.setEnabled(false);

        jBGuardar.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jBGuardar.setText("Guardar");
        jBGuardar.setEnabled(false);
        jBGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuardarActionPerformed(evt);
            }
        });

        jBCancelar.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jBCancelar.setText("Cancelar");
        jBCancelar.setEnabled(false);
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        jBAñadir.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jBAñadir.setText("Añadir Pago");
        jBAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAñadirActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jcbPasesActividad1.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jcbPasesActividad1.setText("Primer Actividad");
        jcbPasesActividad1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbPasesActividad1ActionPerformed(evt);
            }
        });

        jcbPasesActividad2.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jcbPasesActividad2.setText("Segunda Actividad");
        jcbPasesActividad2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbPasesActividad2ActionPerformed(evt);
            }
        });

        jPPasesActividad1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Asignar Pases", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("BankGothic Lt BT", 0, 14))); // NOI18N
        jPPasesActividad1.setEnabled(false);

        jCActividades1.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jCActividades1.setEnabled(false);

        buttonGroup1.add(jRBPaseLibre);
        jRBPaseLibre.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jRBPaseLibre.setText("Pase Libre");
        jRBPaseLibre.setEnabled(false);

        buttonGroup1.add(jRB4Pases);
        jRB4Pases.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jRB4Pases.setText("4 Pases");
        jRB4Pases.setEnabled(false);

        buttonGroup1.add(jRB8Pases);
        jRB8Pases.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jRB8Pases.setText("8 Pases");
        jRB8Pases.setEnabled(false);

        buttonGroup1.add(jRB12Pases);
        jRB12Pases.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jRB12Pases.setText("12 Pases");
        jRB12Pases.setEnabled(false);

        jSpinner2.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jSpinner2.setEnabled(false);

        jLabel15.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jLabel15.setText("Pases");
        jLabel15.setEnabled(false);

        buttonGroup1.add(jRBPases);
        jRBPases.setEnabled(false);

        javax.swing.GroupLayout jPPasesActividad1Layout = new javax.swing.GroupLayout(jPPasesActividad1);
        jPPasesActividad1.setLayout(jPPasesActividad1Layout);
        jPPasesActividad1Layout.setHorizontalGroup(
            jPPasesActividad1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPasesActividad1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPPasesActividad1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRB12Pases)
                    .addComponent(jRB8Pases)
                    .addComponent(jRB4Pases)
                    .addComponent(jRBPaseLibre)
                    .addComponent(jCActividades1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPPasesActividad1Layout.createSequentialGroup()
                        .addComponent(jRBPases)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPPasesActividad1Layout.setVerticalGroup(
            jPPasesActividad1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPasesActividad1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCActividades1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jRB4Pases)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRB8Pases)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRB12Pases)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRBPaseLibre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPPasesActividad1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jRBPases))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPPasesActividad2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Asignar Pases", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("BankGothic Lt BT", 0, 14))); // NOI18N
        jPPasesActividad2.setEnabled(false);

        jCActividades2.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jCActividades2.setEnabled(false);

        buttonGroup2.add(jrbPaseLibre2);
        jrbPaseLibre2.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jrbPaseLibre2.setText("Pase Libre");
        jrbPaseLibre2.setEnabled(false);

        buttonGroup2.add(jrb4Pases2);
        jrb4Pases2.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jrb4Pases2.setText("4 Pases");
        jrb4Pases2.setEnabled(false);

        buttonGroup2.add(jrb8Pases2);
        jrb8Pases2.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jrb8Pases2.setText("8 Pases");
        jrb8Pases2.setEnabled(false);

        buttonGroup2.add(jrb12Pases2);
        jrb12Pases2.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jrb12Pases2.setText("12 Pases");
        jrb12Pases2.setEnabled(false);

        jsPases.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jsPases.setEnabled(false);

        jLabel14.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jLabel14.setText("Pases");
        jLabel14.setEnabled(false);

        buttonGroup2.add(jrbPases);
        jrbPases.setEnabled(false);

        javax.swing.GroupLayout jPPasesActividad2Layout = new javax.swing.GroupLayout(jPPasesActividad2);
        jPPasesActividad2.setLayout(jPPasesActividad2Layout);
        jPPasesActividad2Layout.setHorizontalGroup(
            jPPasesActividad2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPasesActividad2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPPasesActividad2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrb12Pases2)
                    .addComponent(jrb8Pases2)
                    .addComponent(jrb4Pases2)
                    .addComponent(jrbPaseLibre2)
                    .addComponent(jCActividades2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPPasesActividad2Layout.createSequentialGroup()
                        .addComponent(jrbPases)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jsPases, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPPasesActividad2Layout.setVerticalGroup(
            jPPasesActividad2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPasesActividad2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCActividades2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jrb4Pases2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jrb8Pases2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jrb12Pases2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbPaseLibre2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPPasesActividad2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jsPases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jrbPases))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jcbEliminaPasesPrevios.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jcbEliminaPasesPrevios.setText("Elimina pases previos disponibles");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPPasesActividad1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbPasesActividad1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbPasesActividad2)
                            .addComponent(jPPasesActividad2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jcbEliminaPasesPrevios))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jcbEliminaPasesPrevios)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbPasesActividad1)
                    .addComponent(jcbPasesActividad2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPPasesActividad2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPPasesActividad1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPPagos.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPDatosPago.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Datos del Pago"));

        jLabel9.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jLabel9.setText("Forma de Pago");
        jLabel9.setEnabled(false);

        jTConcepto.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jTConcepto.setEnabled(false);
        jTConcepto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTConceptoActionPerformed(evt);
            }
        });

        jCFormaPago.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jCFormaPago.setSelectedIndex(-1);
        jCFormaPago.setEnabled(false);
        jCFormaPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCFormaPagoActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jLabel5.setText("Concepto");
        jLabel5.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jLabel2.setText("Importe");
        jLabel2.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jLabel3.setText("Fecha");
        jLabel3.setEnabled(false);

        jDCFecha.setDateFormatString("dd-MM-yyyy");
        jDCFecha.setEnabled(false);
        jDCFecha.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N

        jFTImporte.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jFTImporte.setEnabled(false);
        jFTImporte.setFont(new java.awt.Font("BankGothic Lt BT", 1, 18)); // NOI18N
        jFTImporte.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFTImporteKeyPressed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("BankGothic Lt BT", 1, 18)); // NOI18N
        jLabel6.setText("$");
        jLabel6.setEnabled(false);

        javax.swing.GroupLayout jPDatosPagoLayout = new javax.swing.GroupLayout(jPDatosPago);
        jPDatosPago.setLayout(jPDatosPagoLayout);
        jPDatosPagoLayout.setHorizontalGroup(
            jPDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPDatosPagoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPDatosPagoLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jFTImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDCFecha, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTConcepto, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCFormaPago, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPDatosPagoLayout.setVerticalGroup(
            jPDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPDatosPagoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDCFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCFormaPago, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFTImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPDatosTarjeta.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Datos de la tarjeta", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("BankGothic Lt BT", 0, 14))); // NOI18N
        jPDatosTarjeta.setName(""); // NOI18N

        jLabel10.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jLabel10.setText("Emisor");

        jCEmisor.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jCEmisor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maestro", "Link", "Visa Electron" }));
        jCEmisor.setSelectedIndex(-1);

        jLabel11.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jLabel11.setText("Numero");

        jFTNroTarjeta.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N

        jFTVencimiento.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N

        jLabel13.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jLabel13.setText("Vencimiento");

        jLabel16.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jLabel16.setText("Titular");

        jFTNroTarjeta1.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPDatosTarjetaLayout = new javax.swing.GroupLayout(jPDatosTarjeta);
        jPDatosTarjeta.setLayout(jPDatosTarjetaLayout);
        jPDatosTarjetaLayout.setHorizontalGroup(
            jPDatosTarjetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPDatosTarjetaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPDatosTarjetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jCEmisor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jFTNroTarjeta, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPDatosTarjetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jFTVencimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel16)
                    .addComponent(jFTNroTarjeta1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPDatosTarjetaLayout.setVerticalGroup(
            jPDatosTarjetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPDatosTarjetaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCEmisor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFTNroTarjeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFTVencimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFTNroTarjeta1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPPagosLayout = new javax.swing.GroupLayout(jPPagos);
        jPPagos.setLayout(jPPagosLayout);
        jPPagosLayout.setHorizontalGroup(
            jPPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPPagosLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPDatosPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPDatosTarjeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPPagosLayout.setVerticalGroup(
            jPPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPagosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPDatosPago, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPDatosTarjeta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPPagoLayout = new javax.swing.GroupLayout(jPPago);
        jPPago.setLayout(jPPagoLayout);
        jPPagoLayout.setHorizontalGroup(
            jPPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPagoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPPagoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jBGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBCancelar))
                    .addGroup(jPPagoLayout.createSequentialGroup()
                        .addGroup(jPPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPPagos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPPagoLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jBAñadir)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(346, 346, 346))
        );
        jPPagoLayout.setVerticalGroup(
            jPPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPagoLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPPagoLayout.createSequentialGroup()
                        .addComponent(jBAñadir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPPagos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBGuardar)
                    .addComponent(jBCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel8.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jLabel8.setText("Apellido y Nombre");

        jLabel7.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N
        jLabel7.setText("Ciclo de Pago");

        jlCicloPago.setFont(new java.awt.Font("BankGothic Lt BT", 1, 18)); // NOI18N

        jLabel17.setText("Vencimiento Actual");

        jlVencimientoActual.setFont(new java.awt.Font("BankGothic Lt BT", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPPago, javax.swing.GroupLayout.PREFERRED_SIZE, 1006, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jTSocio, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBBuscar))
                            .addComponent(jLabel8))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jLabel4)
                                .addGap(87, 87, 87))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jlCicloPago, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(jlVencimientoActual, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLEstado, jlCicloPago});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTSocio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBBuscar)
                            .addComponent(jTNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jlCicloPago, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                            .addComponent(jLEstado, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                            .addComponent(jlVencimientoActual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPPago, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLEstado, jlCicloPago});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ListarPagos(String DNI) {
        
        DefaultTableModel modelo = (DefaultTableModel) jTHistorial.getModel();
        modelo.setRowCount(0);
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Criteria consultaSocios = sesion.createCriteria(Socios.class);
        List<Socios> listaSocios = consultaSocios.list();
        for (int i = 0; i < listaSocios.size(); i++) {
            Socios socio = listaSocios.get(i);
            if (socio.getPersona().getDNI().equals(DNI)) {
                jTSocio.setText(DNI);
                jLEstado.setText(socio.getEstado().getEstado());
                jlVencimientoActual.setText(socio.getPrimerVencimiento().toString());
                switch (socio.getCiclo()) {
                    case 1:
                        jlCicloPago.setText("Mensual");
                        break;
                    case 2:
                        jlCicloPago.setText("Quincenal");
                        break;
                    case 3:
                        jlCicloPago.setText("Semanal");
                        break;
                    default:
                        break;
                }
                jTNombre.setText(socio.getPersona().getApellido() + ", " + socio.getPersona().getNombre());
                Criteria consultaCuentas = sesion.createCriteria(Cuotas_registros.class);
                List<Cuotas_registros> lista_cuotas = consultaCuentas.list();
                for (int j = 0; j < lista_cuotas.size(); j++) {
                    if (lista_cuotas.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "No existen registros para este socio", "Gestion de Cuentas", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        Cuotas_registros cuotas = lista_cuotas.get(j);
                        if (cuotas.getSocio().getPersona().getDNI().equals(DNI)) {
                            jLEstado.setText(cuotas.getSocio().getEstado().getEstado());
                            Object[] fila = {seteosGUI.fechaCorta(cuotas.getFecha()), cuotas.getObservaciones(), cuotas.getFormaPago().getFormaPago(), cuotas.getImporte()};
                            modelo.addRow(fila);
                        }
                        
                    }
                }
            } else {
            }
        }
        
    }
    
    public void insertarEnJTable(Cuotas_registros NuevoPago, int i) throws SQLException {
        DefaultTableModel modelo = (DefaultTableModel) jTHistorial.getModel();
        modelo.setRowCount(i);
        Date Fecha = NuevoPago.getFecha();
        Float Importe = NuevoPago.getImporte();
        FormasPago FormaPago = NuevoPago.getFormaPago();
        
        Object[] fila = {Fecha, FormaPago.getFormaPago(), Importe};
        modelo.addRow(fila);
        
    }
    private void jBAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAñadirActionPerformed
        
        for (int i = 0; i < jPPagos.getComponentCount(); i++) {
            jPPagos.getComponent(i).setEnabled(true);
        }
        for (int i = 0; i < jPDatosPago.getComponentCount(); i++) {
            jPDatosPago.getComponent(i).setEnabled(true);
        }
        jBGuardar.setEnabled(true);
        jBCancelar.setEnabled(true);
//        claseFunciones.ComboGenerico(jCFormaPago, "formas_pago", "idFormaPago", "formaPago");
        jDCFecha.setDate(Date.from(Instant.now()));
        jCFormaPago.setSelectedIndex(0);
        
        Calendar cal = Calendar.getInstance();
        cal.setTime(Date.from(Instant.now()));
        String nameMonth = cal.getDisplayName(Calendar.MONTH, Calendar.LONG, new Locale("es", "ES"));
        System.out.println(nameMonth);
        
        jTConcepto.setText("Cuota " + nameMonth);
        jFTImporte.requestFocus();

    }//GEN-LAST:event_jBAñadirActionPerformed
    
    private void Apertura() {
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        sesion.beginTransaction();
        Caja_diaria apertura = new Caja_diaria();
        FormasPago formaPago = new FormasPago();
        apertura.setFecha(Date.from(Instant.now()));
        apertura.setCategoria(1);
        apertura.setConcepto("Apertura de Caja");
        formaPago.setIdFormaPago(1);
        apertura.setFormaPago(formaPago);
        Float saldo = saldoPrevio();
        apertura.setSaldo(saldo);
        sesion.save(apertura);
        sesion.getTransaction().commit();
    }
    
    public float saldoPrevio() {
        
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Float saldo = 0.00f;
        Criteria query_caja = sesion.createCriteria(Caja_diaria.class);
        List<Caja_diaria> lista_caja = query_caja.list();
        query_caja.setFirstResult(lista_caja.size() - 1 - ParametrosSistema.cantidadMovimientos);
        query_caja.setMaxResults(ParametrosSistema.cantidadMovimientos + 1);
        lista_caja = query_caja.list();
        
        for (int i = 0; i < lista_caja.size(); i++) {
            
            Caja_diaria movimiento = lista_caja.get(i);
            saldo = movimiento.getSaldo();
            
        }
        sesion.close();
        return (saldo);
    }

    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed
        if (ParametrosSistema.estadoCaja == 0) {
            int Resp = JOptionPane.showConfirmDialog(this, "La caja diaria no fue abierta.\nNo puede realizar movimientos financieros hasta tanto haga la apertura. \nDesea"
                    + " efectuar la apertura de caja?", "Carga de pagos", JOptionPane.YES_NO_OPTION);
            if (Resp == 0) {
                ParametrosSistema.estadoCaja = 1;
                ParametrosSistema.GuardaParametros();
                Caja_diaria.AbrirCaja();
                JOptionPane.showMessageDialog(this, "La apertura de caja se realizó correctamente", "Gestión de Caja Diaria", JOptionPane.INFORMATION_MESSAGE);
                GuardarRegistro();
            } else {
                JOptionPane.showMessageDialog(this, "La apertura de caja no se realizó", "Gestión de Caja Diaria", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            GuardarRegistro();
        }

    }//GEN-LAST:event_jBGuardarActionPerformed
    
    private void GuardarRegistro() {
        int pasesDisponibles;
        int pases;
        
        int Respu = JOptionPane.showConfirmDialog(this, "Desea continuar con el asiento del movimiento?", "Carga de pagos", JOptionPane.YES_NO_OPTION);
        if (Respu == 1) {
            JOptionPane.showMessageDialog(rootPane, "Canceló la operacion");
        } else {
//            ResultSetComboBoxModel FP = (ResultSetComboBoxModel)jCFormaPago.getModel();
            String Importe = jFTImporte.getText();
            Session sesion = HibernateUtil.getSessionFactory().openSession();
            sesion.beginTransaction();
            Cuotas_registros nuevo_pago = new Cuotas_registros();
            Personas persona = null;
            Socios socio = null;
            //TODO COrregir seleccio del combo, daba error de modelo
            
            FormasPago formaPago = new FormasPago();
            ComboBoxModel<String> FP = jCFormaPago.getModel();
//            ResultSetComboBoxModel fp = (ResultSetComboBoxModel) jCFormaPago.getModel();
//            fp.setIdFormaPago();
            //formaPago.setIdFormaPago(Integer.parseInt(FP.getElementAt(jCFormaPago.getSelectedIndex())));
            formaPago.setIdFormaPago(jCFormaPago.getSelectedIndex()+1);
            Criteria consulta_socio = sesion.createCriteria(Socios.class);
            List<Socios> socios_db = consulta_socio.list();
            for (int i = 0; i < socios_db.size(); i++) {
                socio = socios_db.get(i);
                if (socio.getPersona().getDNI().equals(jTSocio.getText())) {
                    nuevo_pago.setFecha(jDCFecha.getDate());
                    nuevo_pago.setImporte(Float.valueOf(Importe));
                    socio.setPersona(socio.getPersona());
                    nuevo_pago.setFormaPago(formaPago);
                    nuevo_pago.setSocio(socio);
                    nuevo_pago.setObservaciones(jTConcepto.getText());
                    nuevo_pago.setVencimientoAbonado(socio.getPrimerVencimiento());
                    CargarPases(socio);
                    Criteria consulta = sesion.createCriteria(Caja_diaria.class);
                    List<Caja_diaria> caja = consulta.list();
                    int ultimo_registro = caja.size();
                    float saldo;
                    if (caja.isEmpty()) {
                        saldo = 0;
                    } else {
                        saldo = caja.get(ultimo_registro - 1).getSaldo();
                    }
                    Caja_diaria registro = new Caja_diaria();
                    registro.setFecha(jDCFecha.getDate());
                    registro.setCategoria(5); // Ingresos de socios 5 / Ingresos manuales 2
                    registro.setConcepto(jTSocio.getText() + " - " + jTConcepto.getText());
                    registro.setFormaPago(formaPago);
                    registro.setHaber(Float.valueOf(jFTImporte.getText()));
                    registro.setSaldo(saldo + Float.valueOf((jFTImporte.getText())));
                    sesion.save(registro);
                    sesion.save(nuevo_pago);
                    ParametrosSistema.cantidadMovimientos = ParametrosSistema.cantidadMovimientos + 1;
                    ParametrosSistema.GuardaParametros();

                    //TODO Verificar que ciclo de pago tiene el socio, y de acuerdo a esto cambiar los vencimientos.
                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime(Date.from(Instant.now())); // Configuramos la fecha actual
                    calendar.setTime(socio.getPrimerVencimiento()); // Actualizo vencimiento
                    int dias = 30;
                    int prorroga = 3;
                    
                    socio.setVencimientoPrevio(socio.getPrimerVencimiento());
                    calendar.add(Calendar.DAY_OF_YEAR, dias);
                    socio.setPrimerVencimiento(calendar.getTime());
                    calendar.add(Calendar.DAY_OF_YEAR, prorroga);
                    socio.setSegundoVencimiento(calendar.getTime());
                    
                    if (socio.getEstado().getIdEstado() == 2) {
                        if (JOptionPane.showConfirmDialog(this, "El socio se encuentra Inactivo.\n¿Desea cambiar el estado del socio?", "Gestión de Socios", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == 0) {
                            Estados estado = new Estados();
                            estado.setIdEstado(1);
                            socio.setEstado(estado);
                        }
                    }
                    // TODO Chequear cambio update por saveOrUpdate
                    sesion.update(socio);
                    sesion.getTransaction().commit();
                    sesion.close();
                    
                    JOptionPane.showMessageDialog(this, "El pago fue cargado correctamente");
                    this.getContentPane().removeAll();
                    initComponents();
                }
                
            }
            
        }
    }
    
    private void CargarPases(Socios socio) {
        ComboBoxModel<String> modelo1 = jCActividades1.getModel();
        ComboBoxModel<String> modelo2 = jCActividades2.getModel();
        int pasesDisponibles = 0, pases = 0;
        
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Criteria criteria = sesion.createCriteria(Actividades_Socios_Turnos.class
        );
        List<Actividades_Socios_Turnos> listaRelaciones = criteria.list();
        for (int a = 0; a < listaRelaciones.size(); a++) {
            Actividades_Socios_Turnos relacion = listaRelaciones.get(a);
            if (relacion.getSocio().getPersona().getDNI().equals(jTSocio.getText())) {
                sesion.getTransaction().begin();
                if (jcbPasesActividad1.isSelected()) {
                    if (relacion.getRelacion().getActividad().getActividad().equals(modelo1.getElementAt(jCActividades1.getSelectedIndex()))) {
                        if (jcbEliminaPasesPrevios.isSelected()) {
                            pasesDisponibles = 0;
                        } else {
                            pasesDisponibles = relacion.getPases();
                        }
                        if (jRB4Pases.isSelected()) {
                            pases = 4;
                            relacion.setPases(pases + pasesDisponibles);
                            relacion.setPaseLibre(0);
                        }
                        if (jRB8Pases.isSelected()) {
                            pases = 8;
                            relacion.setPases(pases + pasesDisponibles);
                            relacion.setPaseLibre(0);
                        }
                        if (jRB12Pases.isSelected()) {
                            pases = 12;
                            relacion.setPases(pases + pasesDisponibles);
                            relacion.setPaseLibre(0);
                        }
                        if (jRBPases.isSelected()) {
                            pases = Integer.parseInt(jSpinner2.getValue().toString());
                            relacion.setPases(pases + pasesDisponibles);
                            relacion.setPaseLibre(0);
                        }
                        if (jRBPaseLibre.isSelected()) {
                            relacion.setPaseLibre(1);
                            
                        }
                    }
                }
                if (jcbPasesActividad2.isSelected()) {
                    if (relacion.getRelacion().getActividad().getActividad().equals(modelo2.getElementAt(jCActividades2.getSelectedIndex()))) {
                        if (jcbEliminaPasesPrevios.isSelected()) {
                            pasesDisponibles = 0;
                        } else {
                            pasesDisponibles = relacion.getPases();
                        }
                        if (jrb4Pases2.isSelected()) {
                            pases = 4;
                            relacion.setPases(pases + pasesDisponibles);
                            relacion.setPaseLibre(0);
                        }
                        if (jrb8Pases2.isSelected()) {
                            pases = 8;
                            relacion.setPases(pases + pasesDisponibles);
                            relacion.setPaseLibre(0);
                        }
                        if (jrb12Pases2.isSelected()) {
                            pases = 12;
                            relacion.setPases(pases + pasesDisponibles);
                            relacion.setPaseLibre(0);
                        }
                        if (jrbPases.isSelected()) {
                            pases = Integer.parseInt(jsPases.getValue().toString());
                            relacion.setPases(pases + pasesDisponibles);
                            relacion.setPaseLibre(0);
                        }
                        if (jrbPaseLibre2.isSelected()) {
                            relacion.setPaseLibre(1);
                        }
                    }
                }
                sesion.save(relacion);
                sesion.getTransaction().commit();
            }
        }
    }

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        jDCFecha.setEnabled(false);
        jFTImporte.setEnabled(false);
        
        jCFormaPago.setEnabled(false);
        jBGuardar.setEnabled(false);
        jBCancelar.setEnabled(false);
        jPDatosTarjeta.setVisible(false);
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void jCFormaPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCFormaPagoActionPerformed
        switch (jCFormaPago.getSelectedIndex()) {
            case 1:
                jPDatosTarjeta.setVisible(true);
                TarjetasdeDébito();
                break;
            case 2:
                TarjetasdeCredito();
                break;
            default:
                jPDatosTarjeta.setVisible(false);
                break;
        }
    }
    
    private void TarjetasdeDébito() {

    }//GEN-LAST:event_jCFormaPagoActionPerformed
    
    private void TarjetasdeCredito() {
        
    }

    private void jFTImporte1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTImporte1KeyPressed
        //    JOptionPane.showMessageDialog(this, evt.getKeyCode());

        if (evt.getKeyCode() == 110) {
            evt.setKeyCode(44);
            
        }
    }//GEN-LAST:event_jFTImporte1KeyPressed
    private void jFTImporteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTImporteKeyPressed
        //    JOptionPane.showMessageDialog(this, evt.getKeyCode());

        if (evt.getKeyCode() == 110) {
            evt.setKeyCode(44);
            
        }
    }//GEN-LAST:event_jFTImporteKeyPressed
    private void jBBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarActionPerformed
        ListarPagos(jTSocio.getText());
    }//GEN-LAST:event_jBBuscarActionPerformed

    private void jTSocioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTSocioKeyPressed

    }//GEN-LAST:event_jTSocioKeyPressed

    private void jTConceptoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTConceptoActionPerformed

    }//GEN-LAST:event_jTConceptoActionPerformed

    private void jcbPasesActividad1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbPasesActividad1ActionPerformed
        if (jcbPasesActividad1.isSelected()) {
            LlenarComboActividades(jCActividades1);
            jPPasesActividad1.setEnabled(true);
            for (int i = 0; i < jPPasesActividad1.getComponentCount(); i++) {
                jPPasesActividad1.getComponent(i).setEnabled(true);
            }
            
        } else {
            jPPasesActividad1.setEnabled(false);
            
        }

    }//GEN-LAST:event_jcbPasesActividad1ActionPerformed

    private void jcbPasesActividad2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbPasesActividad2ActionPerformed
        if (jcbPasesActividad1.isSelected()) {
            
            if (jcbPasesActividad2.isSelected()) {
                if (jCActividades1.getItemCount() > 1) {
                    LlenarComboActividades(jCActividades2);
                    jPPasesActividad2.setEnabled(true);
                    for (int i = 0; i < jPPasesActividad2.getComponentCount(); i++) {
                        jPPasesActividad2.getComponent(i).setEnabled(true);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "El socio tiene asignada solo una actividad", "Gestión de Cuentas", JOptionPane.ERROR_MESSAGE);
                    jcbPasesActividad2.setSelected(false);
                }
            } else {
                jPPasesActividad2.setEnabled(false);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No puede asignar pases sin seleccionar antes la primer actividad.",
                    "Gestion de Cuenta y Pases", JOptionPane.INFORMATION_MESSAGE);
            jcbPasesActividad2.setSelected(false);
        }
    }//GEN-LAST:event_jcbPasesActividad2ActionPerformed

    private void jTSocioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTSocioFocusGained
        getRootPane().setDefaultButton(jBBuscar);
    }//GEN-LAST:event_jTSocioFocusGained
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jBAñadir;
    private javax.swing.JButton jBBuscar;
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBGuardar;
    private javax.swing.JComboBox<String> jCActividades1;
    private javax.swing.JComboBox<String> jCActividades2;
    private javax.swing.JComboBox jCEmisor;
    private javax.swing.JComboBox jCFormaPago;
    private com.toedter.calendar.JDateChooser jDCFecha;
    private javax.swing.JFormattedTextField jFTImporte;
    private javax.swing.JFormattedTextField jFTImporte1;
    private javax.swing.JFormattedTextField jFTNroTarjeta;
    private javax.swing.JFormattedTextField jFTNroTarjeta1;
    private javax.swing.JFormattedTextField jFTVencimiento;
    private javax.swing.JLabel jLEstado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPDatosPago;
    private javax.swing.JPanel jPDatosTarjeta;
    private javax.swing.JPanel jPPago;
    private javax.swing.JPanel jPPagos;
    private javax.swing.JPanel jPPasesActividad1;
    private javax.swing.JPanel jPPasesActividad2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRB12Pases;
    private javax.swing.JRadioButton jRB4Pases;
    private javax.swing.JRadioButton jRB8Pases;
    private javax.swing.JRadioButton jRBPaseLibre;
    private javax.swing.JRadioButton jRBPases;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTextField jTConcepto;
    private javax.swing.JTable jTHistorial;
    private javax.swing.JTextField jTNombre;
    private javax.swing.JTextField jTSocio;
    private javax.swing.JCheckBox jcbEliminaPasesPrevios;
    private javax.swing.JCheckBox jcbPasesActividad1;
    private javax.swing.JCheckBox jcbPasesActividad2;
    private javax.swing.JLabel jlCicloPago;
    private javax.swing.JLabel jlVencimientoActual;
    private javax.swing.JRadioButton jrb12Pases2;
    private javax.swing.JRadioButton jrb4Pases2;
    private javax.swing.JRadioButton jrb8Pases2;
    private javax.swing.JRadioButton jrbPaseLibre2;
    private javax.swing.JRadioButton jrbPases;
    private javax.swing.JSpinner jsPases;
    // End of variables declaration//GEN-END:variables

    private void LlenarComboActividades(JComboBox<String> comboaLlenar) {
        comboaLlenar.removeAllItems();
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Criteria consultaActividades = sesion.createCriteria(Actividades_Socios_Turnos.class
        );
        List<Actividades_Socios_Turnos> listaFiltrada = consultaActividades.list();
        listaFiltrada.clear();
        
        List<Actividades_Socios_Turnos> listaActividades = consultaActividades.list();
        boolean existeActividad = false;
        for (int i = 0; i < listaActividades.size(); i++) {
            Actividades_Socios_Turnos actividad = listaActividades.get(i);
            if (actividad.getSocio().getPersona().getDNI().equals(jTSocio.getText())) {
                existeActividad = false;
                if (listaFiltrada.isEmpty()) {
                    listaFiltrada.add(actividad);
                    
                } else {
                    for (int j = 0; j < listaFiltrada.size(); j++) {
                        if (listaFiltrada.get(j).getRelacion().getActividad().getIdActividad() == actividad.getRelacion().getActividad().getIdActividad()) {
                            existeActividad = true;
                        } else {
                        }
                        
                    }
                    if (existeActividad == false) {
                        listaFiltrada.add(actividad);
                    }
                    
                }
                
            }
        }
        for (int h = 0; h < listaFiltrada.size(); h++) {
            comboaLlenar.addItem(listaFiltrada.get(h).getRelacion().getActividad().getActividad());
            
        }
    }
}
